import axios from "axios";

const API_BASE_URL = import.meta.env.VITE_API_URL || "http://localhost:4000/api";

/**
 * üé• Service de gestion des vid√©os (Upload Vimeo + CRUD MongoDB)
 */
export const videoService = {
  /**
   * 1Ô∏è‚É£ Demander une URL d‚Äôupload √† Vimeo
   * @param title titre de la vid√©o
   * @param description description de la vid√©o
   * @param size taille du fichier (en octets)
   * @param isPrivate vid√©o priv√©e ou publique
   */
  async createUploadUrl(title: string, description: string, size: number, isPrivate: boolean) {
    try {
      const res = await axios.post(`${API_BASE_URL}/videos/upload-url`, {
        title,
        description,
        size,
        isPrivate,
      });
      return res.data; // { uploadUrl, vimeoId }
    } catch (error: any) {
      console.error("‚ùå Erreur cr√©ation URL Vimeo :", error.response?.data || error.message);
      throw error.response?.data || { message: "Erreur lors de la cr√©ation de l‚ÄôURL Vimeo" };
    }
  },

  /**
   * 2Ô∏è‚É£ Upload du fichier vid√©o vers Vimeo via TUS
   * @param uploadUrl URL d‚Äôupload re√ßue depuis Vimeo
   * @param file Fichier vid√©o local
   */
  async uploadToVimeo(uploadUrl: string, file: File) {
    try {
      const res = await axios.patch(uploadUrl, file, {
        headers: {
          "Tus-Resumable": "1.0.0",
          "Upload-Offset": "0",
          "Content-Type": "application/offset+octet-stream",
        },
      });
      return res;
    } catch (error: any) {
      console.error("‚ùå Erreur upload Vimeo :", error.response?.data || error.message);
      throw error.response?.data || { message: "Erreur upload Vimeo" };
    }
  },

  /**
   * 3Ô∏è‚É£ Enregistrer les m√©tadonn√©es de la vid√©o dans MongoDB
   * @param videoData { title, description, thumbnail, vimeoId, creationDate, isPrivate }
   */
  async registerVideo(videoData: {
    title: string;
    description?: string;
    thumbnail?: string;
    vimeoId: string;
    creationDate?: string;
    isPrivate?: boolean;
  }) {
    try {
      const res = await axios.post(`${API_BASE_URL}/videos/register`, videoData);
      return res.data;
    } catch (error: any) {
      console.error("‚ùå Erreur enregistrement MongoDB :", error.response?.data || error.message);
      throw error.response?.data || { message: "Erreur enregistrement MongoDB" };
    }
  },

  /**
   * 4Ô∏è‚É£ R√©cup√©rer toutes les vid√©os
   */
  async getVideos() {
    try {
      const res = await axios.get(`${API_BASE_URL}/videos`);
      return res.data;
    } catch (error: any) {
      console.error("‚ùå Erreur r√©cup√©ration vid√©os :", error.response?.data || error.message);
      throw error.response?.data || { message: "Erreur r√©cup√©ration vid√©os" };
    }
  },

  /**
   * 5Ô∏è‚É£ R√©cup√©rer une vid√©o sp√©cifique (par ID Mongo)
   */
  async getVideoById(id: string) {
    try {
      const res = await axios.get(`${API_BASE_URL}/videos/${id}`);
      return res.data;
    } catch (error: any) {
      console.error("‚ùå Erreur r√©cup√©ration vid√©o :", error.response?.data || error.message);
      throw error.response?.data || { message: "Erreur r√©cup√©ration vid√©o" };
    }
  },

  /**
   * 6Ô∏è‚É£ Supprimer une vid√©o
   */
  async deleteVideo(id: string) {
    try {
      const res = await axios.delete(`${API_BASE_URL}/videos/${id}`);
      return res.data;
    } catch (error: any) {
      console.error("‚ùå Erreur suppression vid√©o :", error.response?.data || error.message);
      throw error.response?.data || { message: "Erreur suppression vid√©o" };
    }
  },

  /**
   * 7Ô∏è‚É£ Changer la visibilit√© (public ‚Üî priv√©)
   */
  async toggleActive(id: string) {
    try {
      const res = await axios.patch(`${API_BASE_URL}/videos/${id}/toggle`);
      return res.data;
    } catch (error: any) {
      console.error("‚ùå Erreur toggle visibilit√© :", error.response?.data || error.message);
      throw error.response?.data || { message: "Erreur changement visibilit√©" };
    }
  },

  /**
   * 8Ô∏è‚É£ R√©cup√©rer les infos directes depuis l‚ÄôAPI Vimeo
   */
  async getVimeoInfo(vimeoId: string) {
    try {
      const res = await axios.get(`${API_BASE_URL}/videos/vimeo/${vimeoId}`);
      return res.data;
    } catch (error: any) {
      console.error("‚ùå Erreur r√©cup√©ration Vimeo info :", error.response?.data || error.message);
      throw error.response?.data || { message: "Erreur r√©cup√©ration Vimeo" };
    }
  },


    // 9Ô∏è‚É£ ‚úÖ Mettre √† jour une vid√©o par ID (titre, description, date, visibilit√©)
  async updateVideoById(id: string, updates: {
    title?: string;
    description?: string;
    creationDate?: string;
    isPrivate?: boolean;
  }) {
    try {
      const res = await axios.patch(`${API_BASE_URL}/videos/${id}`, updates);
      return res.data;
    } catch (error: any) {
      console.error("‚ùå Erreur update vid√©o :", error.response?.data || error.message);
      throw error.response?.data || { message: "Erreur mise √† jour vid√©o" };
    }
  },
};
