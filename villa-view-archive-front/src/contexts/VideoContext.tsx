import React, { createContext, useContext, useState, useEffect } from "react";
import { Video } from "../types/video";
import { videoService } from "../services/video.service";
import { toast } from "@/hooks/use-toast";

interface VideoContextType {
  videos: Video[];
  addVideo: (video: Omit<Video, "_id" | "createdAt" | "updatedAt">) => Promise<void>;
  updateVideo: (id: string, updates?: Partial<Video>) => Promise<void>;
  deleteVideo: (id: string) => Promise<void>;
  getPublicVideos: () => Video[];
}

const VideoContext = createContext<VideoContextType | undefined>(undefined);

export const useVideos = () => {
  const context = useContext(VideoContext);
  if (!context) throw new Error("useVideos must be used within a VideoProvider");
  return context;
};

export const VideoProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [videos, setVideos] = useState<Video[]>([]);

  /* -------------------------------------------------------------------------- */
  /* üü¢ Charger les vid√©os depuis MongoDB au montage                            */
  /* -------------------------------------------------------------------------- */
  useEffect(() => {
    (async () => {
      try {
        const data = await videoService.getVideos();
        setVideos(data);
      } catch (err) {
        console.error("Erreur chargement vid√©os :", err);
        toast({
          title: "B≈ÇƒÖd ≈Çadowania",
          description: "Nie uda≈Ço siƒô za≈Çadowaƒá listy wideo.",
          variant: "destructive",
        });
      }
    })();
  }, []);

  /* -------------------------------------------------------------------------- */
  /* ‚ûï Ajouter une vid√©o (via backend ‚Üí MongoDB)                                */
  /* -------------------------------------------------------------------------- */
  const addVideo = async (video: Omit<Video, "_id" | "createdAt" | "updatedAt">) => {
    try {
      const res = await videoService.registerVideo(video);
      const added = res.video || res;
      setVideos((prev) => [added, ...prev]);

      toast({
        title: "‚úÖ Wideo dodane",
        description: "Nowe wideo zosta≈Ço pomy≈õlnie zapisane w archiwum.",
      });
    } catch (err) {
      console.error("Erreur ajout vid√©o :", err);
      toast({
        title: "‚ùå B≈ÇƒÖd",
        description: "Nie uda≈Ço siƒô dodaƒá wideo.",
        variant: "destructive",
      });
    }
  };

  /* -------------------------------------------------------------------------- */
  /* üîÅ Mettre √† jour une vid√©o (toggle ou update complet)                      */
  /* -------------------------------------------------------------------------- */
  const updateVideo = async (id: string, updates?: Partial<Video>) => {
    try {
      let updatedVideo;

      if (!updates || Object.keys(updates).length === 0 || updates.isPrivate === undefined) {
        // üîÑ Cas toggle
        const res = await videoService.toggleActive(id);
        updatedVideo = res.video || res;
      } else {
        // ‚úèÔ∏è Cas update complet
        const res = await videoService.updateVideoById(id, updates);
        updatedVideo = res.video || res;
      }

      setVideos((prev) =>
        prev.map((v) => (v._id === id ? { ...v, ...updatedVideo } : v))
      );

      toast({
        title: "üîÑ Zaktualizowano",
        description: "Wideo zosta≈Ço zaktualizowane pomy≈õlnie.",
      });
    } catch (err) {
      console.error("Erreur mise √† jour vid√©o :", err);
      toast({
        title: "‚ùå B≈ÇƒÖd",
        description: "Nie uda≈Ço siƒô zaktualizowaƒá wideo.",
        variant: "destructive",
      });
    }
  };

  /* -------------------------------------------------------------------------- */
  /* üóëÔ∏è Supprimer une vid√©o                                                     */
  /* -------------------------------------------------------------------------- */
  const deleteVideo = async (id: string) => {
    try {
      await videoService.deleteVideo(id);
      setVideos((prev) => prev.filter((v) => v._id !== id));

      toast({
        title: "üóëÔ∏è Usuniƒôto",
        description: "Wideo zosta≈Ço pomy≈õlnie usuniƒôte.",
      });
    } catch (err) {
      console.error("Erreur suppression vid√©o :", err);
      toast({
        title: "‚ùå B≈ÇƒÖd",
        description: "Nie uda≈Ço siƒô usunƒÖƒá wideo.",
        variant: "destructive",
      });
    }
  };

  /* -------------------------------------------------------------------------- */
  /* üåç Filtrer uniquement les vid√©os publiques                                 */
  /* -------------------------------------------------------------------------- */
  const getPublicVideos = () => videos.filter((v) => !v.isPrivate);

  return (
    <VideoContext.Provider
      value={{ videos, addVideo, updateVideo, deleteVideo, getPublicVideos }}
    >
      {children}
    </VideoContext.Provider>
  );
};
