//const fetch = require("node-fetch");
const Video = require("../models/video.model");
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

const VIMEO_ACCESS_TOKEN = process.env.VIMEO_ACCESS_TOKEN;

/* -------------------------------------------------------------------------- */
/* üé•  CONTROLEUR VIMEO COMPLET : Upload + M√©tadonn√©es + CRUD                 */
/* -------------------------------------------------------------------------- */

/**
 * üé¨ √âtape 1 : Cr√©e une URL d‚Äôupload Vimeo via API
 * Frontend envoie : { title, description, size, isPrivate }
 * Vimeo r√©pond avec : upload_link + vimeoId
 */
exports.createUploadUrl = async (req, res) => {
  try {
    const { title, description, size, isPrivate } = req.body;

    if (!size) {
      return res.status(400).json({ message: "La taille du fichier est requise." });
    }

    const response = await fetch("https://api.vimeo.com/me/videos", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${VIMEO_ACCESS_TOKEN}`,
        "Content-Type": "application/json",
        Accept: "application/vnd.vimeo.*+json;version=3.4",
      },
      body: JSON.stringify({
        upload: { approach: "tus", size },
        name: title || "Nouvel upload",
        description,
        privacy: { view: isPrivate ? "nobody" : "anybody" },
      }),
    });

    const data = await response.json();

    if (!response.ok) {
      console.error("Erreur cr√©ation Vimeo :", data);
      return res.status(400).json({ message: "Erreur Vimeo", error: data });
    }

    const uploadUrl = data.upload?.upload_link;
    const vimeoId = data.uri?.split("/").pop();

    res.status(200).json({
      message: "Upload URL Vimeo cr√©√©e ‚úÖ",
      uploadUrl,
      vimeoId,
    });
  } catch (err) {
    console.error("Erreur cr√©ation URL Vimeo :", err);
    res.status(500).json({ message: "Erreur serveur Vimeo" });
  }
};

/**
 * üßæ √âtape 2 : Enregistre la vid√©o dans MongoDB apr√®s upload
 * Frontend envoie : { title, description, thumbnail, vimeoId, creationDate, isPrivate }
 */
// exports.registerVideo = async (req, res) => {
//   try {
//     const { title, description, thumbnail, vimeoId, isPrivate, creationDate } = req.body;

//     if (!vimeoId) {
//       return res.status(400).json({ message: "vimeoId est requis." });
//     }

//     // üì° R√©cup√©rer les m√©tadonn√©es depuis Vimeo
//     const vimeoRes = await fetch(`https://api.vimeo.com/videos/${vimeoId}`, {
//       headers: { Authorization: `Bearer ${VIMEO_ACCESS_TOKEN}` },
//     });

//     if (!vimeoRes.ok) {
//       const errorText = await vimeoRes.text();
//       console.error("Erreur r√©cup√©ration m√©tadonn√©es Vimeo :", errorText);
//       return res.status(400).json({ message: "Impossible de r√©cup√©rer les infos Vimeo." });
//     }

//     const vimeoData = await vimeoRes.json();

//     // üéûÔ∏è G√©n√©rer les URLs
//     const embedUrl = `https://player.vimeo.com/video/${vimeoId}`;
//     const shareUrl = vimeoData.link || `https://vimeo.com/${vimeoId}`;
//     const finalThumbnail = thumbnail || vimeoData?.pictures?.sizes?.pop()?.link || "";

//     // üíæ Enregistrement MongoDB
//     const newVideo = new Video({
//       title: title || vimeoData.name,
//       description: description || vimeoData.description,
//       thumbnail: finalThumbnail,
//       embedUrl,
//       shareUrl,
//       vimeoId,
//       creationDate: creationDate || new Date().toISOString().split("T")[0],
//       isPrivate: isPrivate ?? false,
//     });

//     await newVideo.save();

//     res.status(201).json({
//       message: "Vid√©o enregistr√©e dans la base ‚úÖ",
//       video: newVideo,
//     });
//   } catch (err) {
//     console.error("Erreur enregistrement vid√©o :", err);
//     res.status(500).json({ message: "Erreur serveur" });
//   }
// };

exports.registerVideo = async (req, res) => {
  try {
    const { title, description, embedUrl, shareUrl, vimeoId, creationDate, isPrivate } = req.body;

    if (!vimeoId) {
      return res.status(400).json({ message: "Missing Vimeo ID." });
    }

    // üß† Fonction utilitaire pour r√©cup√©rer les infos vid√©o Vimeo
    const getVimeoData = async () => {
      const vimeoRes = await fetch(`https://api.vimeo.com/videos/${vimeoId}`, {
        headers: { Authorization: `Bearer ${VIMEO_ACCESS_TOKEN}` },
      });
      if (!vimeoRes.ok) {
        const errorText = await vimeoRes.text();
        console.error("Erreur API Vimeo:", errorText);
        throw new Error("Erreur r√©cup√©ration vid√©o Vimeo");
      }
      return vimeoRes.json();
    };

    // üïì Attente du transcodage si n√©cessaire
    let vimeoData = await getVimeoData();
    let attempts = 0;
    while (vimeoData?.transcode?.status !== "complete" && attempts < 20) {
      console.log(`‚è≥ En attente du transcodage... (${attempts + 1}/20)`);
      await new Promise((r) => setTimeout(r, 5000));
      vimeoData = await getVimeoData();
      attempts++;
    }

    console.log("üé• Vimeo data:", vimeoData);

    // üñºÔ∏è R√©cup√©ration am√©lior√©e des miniatures
    let finalThumbnail = null;

    // 1Ô∏è‚É£ Prendre la plus grande miniature dispo
    if (vimeoData?.pictures?.sizes?.length > 0) {
      finalThumbnail = vimeoData.pictures.sizes.at(-1).link;
    }

    // 2Ô∏è‚É£ Sinon base_link (souvent sur vid√©os non encore pr√™tes)
    else if (vimeoData?.pictures?.base_link) {
      finalThumbnail = vimeoData.pictures.base_link;
    }

    // 3Ô∏è‚É£ Sinon essayer de requ√™ter /pictures s√©par√©ment
    else if (vimeoData?.metadata?.connections?.pictures?.uri) {
      const picUri = vimeoData.metadata.connections.pictures.uri;
      const picRes = await fetch(`https://api.vimeo.com${picUri}`, {
        headers: { Authorization: `Bearer ${VIMEO_ACCESS_TOKEN}` },
      });
      if (picRes.ok) {
        const picData = await picRes.json();
        if (picData?.data?.[0]?.sizes?.length > 0) {
          finalThumbnail = picData.data[0].sizes.at(-1).link;
        } else {
          finalThumbnail = picData?.data?.[0]?.link || null;
        }
      }
    }

    // 4Ô∏è‚É£ Fallback si aucune image trouv√©e
    if (!finalThumbnail) {
      finalThumbnail = "https://i.vimeocdn.com/video/default-2308240_1920x1080?region=us";
    }

    // üíæ Sauvegarde MongoDB
    const newVideo = new Video({
      title: title || vimeoData.name,
      description: description || vimeoData.description,
      thumbnail: finalThumbnail,
      embedUrl: embedUrl || vimeoData.player_embed_url,
      shareUrl: shareUrl || vimeoData.link,
      vimeoId,
      creationDate: creationDate || new Date().toISOString(),
      isPrivate: !!isPrivate,
    });

    await newVideo.save();

    res.status(201).json({
      message: "Vid√©o enregistr√©e dans la base ‚úÖ",
      video: newVideo,
    });
  } catch (err) {
    console.error("‚ùå Erreur cr√©ation vid√©o Vimeo :", err);
    res.status(500).json({ message: "Erreur serveur" });
  }
};

/* -------------------------------------------------------------------------- */
/* üìã  Autres op√©rations CRUD standard                                        */
/* -------------------------------------------------------------------------- */

// üîç R√©cup√©rer toutes les vid√©os
// exports.getVideos = async (req, res) => {
//   try {
//     const videos = await Video.find().sort({ createdAt: -1 });
//     res.json(videos);
//   } catch (err) {
//     console.error("Erreur r√©cup√©ration vid√©os :", err);
//     res.status(500).json({ message: "Erreur serveur" });
//   }
// };

// exports.getVideos = async (req, res) => {
//   try {
//     const videos = await Video.aggregate([
//       {
//         $addFields: {
//           parsedDate: {
//             $cond: [
//               { $ne: ["$creationDate", null] },
//               { $dateFromString: { dateString: "$creationDate" } },
//               "$createdAt"
//             ]
//           }
//         }
//       },
//       { $sort: { parsedDate: -1 } }
//     ]);

//     res.status(200).json(videos);
//   } catch (error) {
//     console.error("‚ùå Erreur r√©cup√©ration vid√©os :", error);
//     res.status(500).json({ message: "Erreur r√©cup√©ration vid√©os" });
//   }
// };
exports.getVideos = async (req, res) => {
  try {
    const videos = await Video.find();

    const updatedVideos = await Promise.all(
      videos.map(async (video) => {
        try {
          if (!video.vimeoId) return video; // skip si pas de Vimeo ID

          const response = await fetch(`https://api.vimeo.com/videos/${video.vimeoId}`, {
            headers: { Authorization: `Bearer ${VIMEO_ACCESS_TOKEN}` },
          });

          if (!response.ok) {
            console.warn(`‚ö†Ô∏è Vimeo ${video.vimeoId} introuvable (${response.status})`);
            return video;
          }

          const vimeoData = await response.json();
          const newThumb =
            vimeoData?.pictures?.sizes?.at(-1)?.link ||
            vimeoData?.pictures?.base_link ||
            null;

          // üß© V√©rifie si la miniature a chang√©
          if (newThumb && newThumb !== video.thumbnail) {
            video.thumbnail = newThumb;
            await video.save();
            console.log(`üñºÔ∏è Thumbnail mise √† jour pour ${video.title}`);
          }

          return video;
        } catch (err) {
          console.error(`‚ùå Erreur mise √† jour thumbnail pour ${video.vimeoId}`, err);
          return video; // continue quand m√™me
        }
      })
    );

    // üîΩ Tri du plus r√©cent au plus ancien
    const sorted = updatedVideos.sort((a, b) => {
      const dateA = new Date(a.creationDate || a.createdAt);
      const dateB = new Date(b.creationDate || b.createdAt);
      return dateB - dateA;
    });

    res.status(200).json(sorted);
  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration vid√©os :", error);
    res.status(500).json({ message: "Erreur r√©cup√©ration vid√©os" });
  }
};
// üîç R√©cup√©rer une vid√©o par ID Mongo
exports.getVideoById = async (req, res) => {
  try {
    const video = await Video.findById(req.params.id);
    if (!video) return res.status(404).json({ message: "Vid√©o introuvable." });
    res.json(video);
  } catch (err) {
    console.error("Erreur r√©cup√©ration vid√©o :", err);
    res.status(500).json({ message: "Erreur serveur" });
  }
};

// üóëÔ∏è Supprimer une vid√©o
// exports.deleteVideo = async (req, res) => {
//   try {
//     const deletedVideo = await Video.findByIdAndDelete(req.params.id);
//     if (!deletedVideo) return res.status(404).json({ message: "Vid√©o introuvable." });
//     res.json({ message: "Vid√©o supprim√©e ‚úÖ" });
//   } catch (err) {
//     console.error("Erreur suppression vid√©o :", err);
//     res.status(500).json({ message: "Erreur serveur" });
//   }
// };
exports.deleteVideo = async (req, res) => {
  try {
    // üß© 1. Supprimer de la base MongoDB
    const deletedVideo = await Video.findByIdAndDelete(req.params.id);
    if (!deletedVideo) {
      return res.status(404).json({ message: "Vid√©o introuvable." });
    }

    const { vimeoId } = deletedVideo;
    if (!vimeoId) {
      console.warn("‚ö†Ô∏è Aucune vimeoId trouv√©e pour cette vid√©o locale");
      return res.json({ message: "Vid√©o supprim√©e localement ‚úÖ (pas de vimeoId)" });
    }

    // üéØ 2. Supprimer depuis Vimeo via leur API
    const vimeoResponse = await fetch(`https://api.vimeo.com/videos/${vimeoId}`, {
      method: "DELETE",
      headers: {
        Authorization: `Bearer ${VIMEO_ACCESS_TOKEN}`,
      },
    });

    if (vimeoResponse.status === 204) {
      console.log(`üóëÔ∏è Vid√©o Vimeo ${vimeoId} supprim√©e avec succ√®s`);
      return res.json({
        message: "Vid√©o supprim√©e ‚úÖ (local + Vimeo)",
        video: deletedVideo,
      });
    } else if (vimeoResponse.status === 404) {
      console.warn(`‚ö†Ô∏è Vid√©o Vimeo ${vimeoId} d√©j√† inexistante`);
      return res.json({
        message: "Vid√©o supprim√©e localement ‚úÖ (d√©j√† absente sur Vimeo)",
        video: deletedVideo,
      });
    } else {
      const errorText = await vimeoResponse.text();
      console.error("Erreur suppression Vimeo :", errorText);
      return res.status(500).json({
        message: "Vid√©o supprim√©e localement ‚ö†Ô∏è mais √©chec c√¥t√© Vimeo",
        error: errorText,
      });
    }
  } catch (err) {
    console.error("‚ùå Erreur suppression vid√©o :", err);
    res.status(500).json({ message: "Erreur serveur" });
  }
};
// üîÅ Activer / d√©sactiver visibilit√©
exports.toggleActive = async (req, res) => {
  try {
    const { id } = req.params;
    const video = await Video.findById(id);
    if (!video) return res.status(404).json({ message: "Vid√©o introuvable." });

    video.isPrivate = !video.isPrivate;
    await video.save();

    res.json({
      message: `Vid√©o ${video.isPrivate ? "rendue priv√©e" : "rendue publique"} ‚úÖ`,
      video,
    });
  } catch (err) {
    console.error("Erreur toggle visibilit√© :", err);
    res.status(500).json({ message: "Erreur serveur" });
  }
};

// üì• R√©cup√©rer les infos Vimeo par ID
exports.getVimeoInfo = async (req, res) => {
  try {
    const { vimeoId } = req.params;
    const response = await fetch(`https://api.vimeo.com/videos/${vimeoId}`, {
      headers: { Authorization: `Bearer ${VIMEO_ACCESS_TOKEN}` },
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Erreur API Vimeo :", errorText);
      return res.status(400).json({ message: "Impossible de r√©cup√©rer les infos Vimeo." });
    }

    const data = await response.json();
    res.json(data);
  } catch (err) {
    console.error("Erreur r√©cup√©ration Vimeo info :", err);
    res.status(500).json({ message: "Erreur serveur" });
  }
};

// ‚úèÔ∏è Mettre √† jour les infos d‚Äôune vid√©o (titre, description, date, visibilit√©)
exports.updateVideoById = async (req, res) => {
  try {
    const { id } = req.params;
    const { title, description, creationDate, isPrivate } = req.body;

    // üß© V√©rifie l‚Äôexistence
    const video = await Video.findById(id);
    if (!video) {
      return res.status(404).json({ message: "Vid√©o introuvable." });
    }

    // üìù Mise √† jour des champs autoris√©s
    if (title !== undefined) video.title = title;
    if (description !== undefined) video.description = description;
    if (creationDate !== undefined) video.creationDate = creationDate;
    if (isPrivate !== undefined) video.isPrivate = isPrivate;

    await video.save();

    return res.status(200).json({
      message: "Vid√©o mise √† jour ‚úÖ",
      video,
    });
  } catch (err) {
    console.error("‚ùå Erreur update vid√©o :", err);
    res.status(500).json({ message: "Erreur serveur lors de la mise √† jour." });
  }
};

