const fetch = require('node-fetch');
const Video = require('../models/video.model');

const CF_ACCOUNT_ID = process.env.CF_ACCOUNT_ID;
const CF_API_TOKEN = process.env.CF_API_TOKEN;

/* -------------------------------------------------------------------------- */
/* üü¢ CRUD SIMPLIFI√â                                                          */
/* -------------------------------------------------------------------------- */

// üé¨ Cr√©er une nouvelle vid√©o manuellement
exports.createVideo = async (req, res) => {
  try {
    const { title, description, thumbnail, url, isPrivate } = req.body;
    if (!title || !url)
      return res.status(400).json({ message: "Le titre et l'URL sont obligatoires." });

    const newVideo = new Video({ title, description, thumbnail, url, isPrivate });
    await newVideo.save();

    res.status(201).json({
      message: 'Vid√©o cr√©√©e avec succ√®s ‚úÖ',
      video: newVideo
    });
  } catch (err) {
    console.error('Erreur cr√©ation vid√©o :', err);
    res.status(500).json({ message: 'Erreur serveur' });
  }
};

// üìã R√©cup√©rer toutes les vid√©os (sans filtre)
exports.getVideos = async (req, res) => {
  try {
    const videos = await Video.find().sort({ createdAt: -1 });
    res.json(videos);
  } catch (err) {
    console.error('Erreur r√©cup√©ration vid√©os :', err);
    res.status(500).json({ message: 'Erreur serveur' });
  }
};

// üîç R√©cup√©rer une vid√©o par ID
exports.getVideoById = async (req, res) => {
  try {
    const video = await Video.findById(req.params.id);
    if (!video)
      return res.status(404).json({ message: 'Vid√©o introuvable.' });
    res.json(video);
  } catch (err) {
    console.error('Erreur r√©cup√©ration vid√©o :', err);
    res.status(500).json({ message: 'Erreur serveur' });
  }
};

// üóëÔ∏è Supprimer une vid√©o
exports.deleteVideo = async (req, res) => {
  try {
    const deletedVideo = await Video.findByIdAndDelete(req.params.id);
    if (!deletedVideo)
      return res.status(404).json({ message: 'Vid√©o introuvable.' });
    res.json({ message: 'Vid√©o supprim√©e ‚úÖ' });
  } catch (err) {
    console.error('Erreur suppression vid√©o :', err);
    res.status(500).json({ message: 'Erreur serveur' });
  }
};

// üîÅ Activer / d√©sactiver une vid√©o
exports.toggleActive = async (req, res) => {
  try {
    const { id } = req.params;
    const video = await Video.findById(id);
    if (!video)
      return res.status(404).json({ message: 'Vid√©o introuvable.' });

    video.isPrivate = !video.isPrivate;
    await video.save();

    res.json({
      message: `Vid√©o ${video.isPrivate ? 'activ√©e' : 'd√©sactiv√©e'} ‚úÖ`,
      video
    });
  } catch (err) {
    console.error('Erreur changement statut vid√©o :', err);
    res.status(500).json({ message: 'Erreur serveur' });
  }
};

/* -------------------------------------------------------------------------- */
/* üü£ CLOUDLFARE STREAM                                                       */
/* -------------------------------------------------------------------------- */

// üì§ Cr√©er une URL d‚Äôupload direct ET enregistrer la vid√©o dans MongoDB
exports.createUploadUrl = async (req, res) => {
  try {
    const { title, description, thumbnail, isPrivate } = req.body;
    if (!title)
      return res.status(400).json({ message: 'Le titre est obligatoire.' });

    // 1Ô∏è‚É£ Cr√©er une URL d‚Äôupload Cloudflare Stream
    const response = await fetch(
      `https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/stream/direct_upload`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${CF_API_TOKEN}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          maxDurationSeconds: 7200,
          allowedOrigins: ['*']
        })
      }
    );

    const data = await response.json();
    if (!data.success) throw new Error(JSON.stringify(data.errors));

    const { uploadURL, uid } = data.result;

    // 2Ô∏è‚É£ Cr√©er une entr√©e MongoDB
    const newVideo = new Video({
      title,
      description,
      thumbnail,
      url: `https://iframe.videodelivery.net/${uid}`,
      cloudflareId: uid,
      isPrivate: isPrivate !== undefined ? isPrivate : true
    });

    await newVideo.save();

    // 3Ô∏è‚É£ Retourner l'uploadURL et l'objet vid√©o
    res.status(201).json({
      message: 'URL d‚Äôupload cr√©√©e et vid√©o enregistr√©e ‚úÖ',
      uploadURL,
      video: newVideo
    });

  } catch (err) {
    console.error('Erreur cr√©ation upload URL Cloudflare:', err);
    res.status(500).json({ message: 'Erreur Cloudflare Stream' });
  }
};

// üåê Upload depuis une URL distante
exports.uploadFromUrl = async (req, res) => {
  try {
    const { url } = req.body;
    if (!url)
      return res.status(400).json({ message: 'URL source requise.' });

    const response = await fetch(
      `https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/stream/copy`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${CF_API_TOKEN}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ url })
      }
    );

    const data = await response.json();
    if (!data.success) throw new Error(JSON.stringify(data.errors));

    res.json(data.result);
  } catch (err) {
    console.error('Erreur upload via URL Cloudflare:', err);
    res.status(500).json({ message: 'Erreur Cloudflare Stream' });
  }
};

// üì• R√©cup√©rer les infos d'une vid√©o Cloudflare
exports.getStreamInfo = async (req, res) => {
  try {
    const { uid } = req.params;
    const response = await fetch(
      `https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/stream/${uid}`,
      {
        headers: { 'Authorization': `Bearer ${CF_API_TOKEN}` }
      }
    );

    const data = await response.json();
    if (!data.success) throw new Error(JSON.stringify(data.errors));

    res.json(data.result);
  } catch (err) {
    console.error('Erreur r√©cup√©ration vid√©o Cloudflare:', err);
    res.status(500).json({ message: 'Erreur Cloudflare Stream' });
  }
};
